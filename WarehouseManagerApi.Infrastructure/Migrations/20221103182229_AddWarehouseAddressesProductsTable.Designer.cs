// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseManagerApi.Infrastructure.Database;

#nullable disable

namespace WarehouseManagerApi.Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseManagerDbContext))]
    [Migration("20221103182229_AddWarehouseAddressesProductsTable")]
    partial class AddWarehouseAddressesProductsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EasyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OnePieceWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("QuantityAvailable")
                        .HasColumnType("bigint");

                    b.Property<long>("QuantityOnFullPallet")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.WarehouseAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxLoad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxNumberOfPallets")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WarehouseAddresses");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.WarehouseAddressesProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdWarehouseAddress")
                        .HasColumnType("int");

                    b.Property<long>("QuantityAvailable")
                        .HasColumnType("bigint");

                    b.Property<long>("QuantityReservation")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdWarehouseAddress");

                    b.ToTable("WarehouseAddressesProducts");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.WarehouseMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromWarehouseAddressId")
                        .HasColumnType("int");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<int?>("ToWarehouseAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FromWarehouseAddressId");

                    b.HasIndex("IdProduct");

                    b.HasIndex("ToWarehouseAddressId");

                    b.ToTable("WarehouseMovements");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.User", b =>
                {
                    b.HasOne("WarehouseManagerApi.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.WarehouseAddressesProduct", b =>
                {
                    b.HasOne("WarehouseManagerApi.Domain.Entities.Product", "Product")
                        .WithMany("WarehouseAddressesProducts")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseManagerApi.Domain.Entities.WarehouseAddress", "WarehouseAddress")
                        .WithMany("WarehouseAddressesProducts")
                        .HasForeignKey("IdWarehouseAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("WarehouseAddress");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.WarehouseMovement", b =>
                {
                    b.HasOne("WarehouseManagerApi.Domain.Entities.WarehouseAddress", "FromWarehouseAddress")
                        .WithMany("FromWarehouseMovements")
                        .HasForeignKey("FromWarehouseAddressId");

                    b.HasOne("WarehouseManagerApi.Domain.Entities.Product", "Product")
                        .WithMany("WarehouseMovements")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseManagerApi.Domain.Entities.WarehouseAddress", "ToWarehouseAddress")
                        .WithMany("ToWarehouseMovements")
                        .HasForeignKey("ToWarehouseAddressId");

                    b.Navigation("FromWarehouseAddress");

                    b.Navigation("Product");

                    b.Navigation("ToWarehouseAddress");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.Product", b =>
                {
                    b.Navigation("WarehouseAddressesProducts");

                    b.Navigation("WarehouseMovements");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WarehouseManagerApi.Domain.Entities.WarehouseAddress", b =>
                {
                    b.Navigation("FromWarehouseMovements");

                    b.Navigation("ToWarehouseMovements");

                    b.Navigation("WarehouseAddressesProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
